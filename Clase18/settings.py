"""
Django settings for Clase18 project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-182c&q^7j$1d0@mtm2x(-354hd1$&mh&9$pv6=h2qo1a4ppr5h'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'AppCoder',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Clase18.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ["/Users/vanesamizrahi/Django/Clase18/AppCoder/template"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Clase18.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = 'login'
DEBUG = False  # Cambiar a True si da errores en desarrollo
ALLOWED_HOSTS = ['localhost', '127.0.0.1']  # o el dominio real

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'AppCoder', 'static', 'AppCoder')]  # solo para desarrollo
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # solo para producción

# Para que Django sepa dónde buscar los archivos estáticos en desarrollo, debes configurar STATICFILES_DIRS en tu archivo settings.py. 
# Esto hará que Django busque los archivos estáticos en la carpeta static/ de tu aplicación
# en lugar de en staticfiles/. Luego, puedes usar STATIC_URL para especificar la URL de tu carpeta estática en desarrollo.
# En producción, debes usar STATIC_ROOT para especificar dónde se recopilarán los archivos estáticos.
# STATIC_ROOT es la ubicación donde se recopilarán todos los archivos estáticos cuando ejecutes el comando `collectstatic`.
# En desarrollo, puedes usar STATICFILES_DIRS para especificar
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # solo para producción
# Para que Django sepa dónde buscar los archivos estáticos en producción, debes configurar STATICFILES_DIRS en tu archivo settings.py. 
# Esto hará que Django busque los archivos estáticos en la carpeta static/ de tu proyecto en lugar de en staticfiles/. 
# Luego, puedes usar STATIC_URL para especificar la URL de tu carpeta estática en producción.
# ejecutar python manage.py collectstatic cada vez que realices cambios en tus archivos estáticos.
# Eso copiará todos los archivos de static/ a staticfiles/, desde donde Django espera que se sirvan cuando DEBUG = False